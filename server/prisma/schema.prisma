generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  user
  admin
}

model User {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[]
  email        String        @unique
  password     String
  firstName    String
  lastName     String
  birthDate    DateTime?
  avatarUrl    String?
  role         UserRole      @default(user)
}

model Company {
  id          Int        @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  industry    Industry   @relation(fields: [industryId], references: [id])
  industryId  Int
  stocks      Stock[]
  tags        AssetTag[]
  name        String
  shortName   String
  description String
  imageUrl    String?
  website     String
}

model Stock {
  id           Int           @id @default(autoincrement())
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  company      Company       @relation(fields: [companyId], references: [id])
  companyId    Int
  exchange     Exchange      @relation(fields: [exchangeId], references: [id])
  exchangeId   Int
  transactions Transaction[]
  isin         String
  ticker       String
  class        String?
  isActive     Boolean       @default(true)
  adr          Boolean       @default(false)
}

model Exchange {
  id                Int      @id @default(autoincrement())
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  currency          Currency @relation(fields: [currencyId], references: [id])
  currencyId        Int
  stocks            Stock[]
  MIC               String
  name              String
  shortName         String
  code              String?
  codeAlt           String?
  timezoneName      String
  timezoneShortName String
  country           String
  city              String
  website           String
  emoji             String
}

enum TransactionType {
  purchase
  sale
}

model Transaction {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  stock           Stock           @relation(fields: [stockId], references: [id])
  stockId         Int
  user            User            @relation(fields: [userId], references: [id])
  userId          Int
  transactionType TransactionType
  quantity        Decimal         @db.Decimal(10, 2)
  price           Decimal         @db.Decimal(10, 2)
  timestamp       DateTime
}

model Currency {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  exchanges Exchange[]
  name      String
}

model Industry {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  sector    Sector    @relation(fields: [sectorId], references: [id])
  sectorId  Int
  companies Company[]
  name      String
}

model Sector {
  id         Int        @id @default(autoincrement())
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  industries Industry[]
  name       String
}

model AssetTag {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  name      String
}
